@import 'tailwindcss';
@plugin "@tailwindcss/typography";

@theme {
  --font-sans:
    var(--font-rubik), ui-sans-serif, system-ui, sans-serif,
    'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  --font-sans-glitch:
    var(--font-rubik-glitch), ui-sans-serif, system-ui, sans-serif,
    'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  --font-serif:
    var(--font-alegreya), ui-serif, Georgia, Cambria, 'Times New Roman', Times,
    serif;

  --color-border: hsl(var(--border));
  --color-input: hsl(var(--input));
  --color-ring: hsl(var(--ring));
  --color-background: var(--background);
  --color-foreground: var(--foreground);

  --color-primary: hsl(var(--primary));
  --color-primary-foreground: hsl(var(--primary-foreground));

  --color-secondary: hsl(var(--secondary));
  --color-secondary-foreground: hsl(var(--secondary-foreground));

  --color-destructive: hsl(var(--destructive));
  --color-destructive-foreground: hsl(var(--destructive-foreground));

  --color-muted: hsl(var(--muted));
  --color-muted-foreground: hsl(var(--muted-foreground));

  --color-accent: hsl(var(--accent));
  --color-accent-foreground: hsl(var(--accent-foreground));

  --color-popover: hsl(var(--popover));
  --color-popover-foreground: hsl(var(--popover-foreground));

  --color-card: hsl(var(--card));
  --color-card-foreground: hsl(var(--card-foreground));

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --page-max-width: 1440px;

  --leading-tighter: 1.2;
  --leading-testest: 1.1;
}

@utility container {
  margin-inline: auto;
  padding-inline: 2rem;
  @media (width >= --theme(--breakpoint-sm)) {
    max-width: none;
  }
  @media (width >= 1400px) {
    max-width: 1400px;
  }
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@layer base {
  :root {
    --background: #dac8f9;
    --foreground: #000000;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;

    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;

    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;

    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 0%;
    --ring: 0 0% 3.9%;

    --radius: 0.5rem;
  }

  * {
    @apply border-border;
  }

  html {
    @apply font-sans;
  }

  body {
    @apply bg-background text-foreground;
    background-image: url(/background-dot.svg);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-sans;
    @apply font-black;
    @apply uppercase;
    @apply leading-none;
    @apply text-balance;
  }

  a:hover {
    @apply underline;
    @apply underline-offset-2;
  }

  .portable-text {
    p:not(:first-child) {
      margin-top: 1.5rem;
    }
  }

  /* properties copied from apple.com */
  .visually-hidden {
    position: absolute !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(0px 0px 99.9% 99.9%) !important;
    overflow: hidden !important;
    height: 1px !important;
    width: 1px !important;
    padding: 0 !important;
    border: 0 !important;
  }

  @keyframes enter {
    0% {
      opacity: var(--tw-enter-opacity, 1);
      transform: translate3d(
          var(--tw-enter-translate-x, 0),
          var(--tw-enter-translate-y, 0),
          0
        )
        scale3d(
          var(--tw-enter-scale, 1),
          var(--tw-enter-scale, 1),
          var(--tw-enter-scale, 1)
        )
        rotate(var(--tw-enter-rotate, 0));
    }
  }

  @keyframes exit {
    to {
      opacity: var(--tw-exit-opacity, 1);
      transform: translate3d(
          var(--tw-exit-translate-x, 0),
          var(--tw-exit-translate-y, 0),
          0
        )
        scale3d(
          var(--tw-exit-scale, 1),
          var(--tw-exit-scale, 1),
          var(--tw-exit-scale, 1)
        )
        rotate(var(--tw-exit-rotate, 0));
    }
  }

  .data-\[motion\^\=from-\]\:animate-in[data-motion^='from-'],
  .data-\[state\=open\]\:animate-in[data-state='open'],
  .data-\[state\=visible\]\:animate-in[data-state='visible'] {
    animation-name: enter;
    animation-duration: 0.15s;
    --tw-enter-opacity: initial;
    --tw-enter-scale: initial;
    --tw-enter-rotate: initial;
    --tw-enter-translate-x: initial;
    --tw-enter-translate-y: initial;
  }

  .data-\[motion\^\=to-\]\:animate-out[data-motion^='to-'],
  .data-\[state\=closed\]\:animate-out[data-state='closed'],
  .data-\[state\=hidden\]\:animate-out[data-state='hidden'] {
    animation-name: exit;
    animation-duration: 0.15s;
    --tw-exit-opacity: initial;
    --tw-exit-scale: initial;
    --tw-exit-rotate: initial;
    --tw-exit-translate-x: initial;
    --tw-exit-translate-y: initial;
  }

  .data-\[state\=open\]\:fade-in-0[data-state='open'],
  .data-\[state\=visible\]\:fade-in[data-state='visible'] {
    --tw-enter-opacity: 0;
  }

  .data-\[motion\^\=to-\]\:fade-out[data-motion^='to-'],
  .data-\[state\=closed\]\:fade-out-0[data-state='closed'],
  .data-\[state\=hidden\]\:fade-out[data-state='hidden'] {
    --tw-exit-opacity: 0;
  }

  .data-\[state\=closed\]\:slide-out-to-left[data-state='closed'] {
    --tw-exit-translate-x: -100%;
  }

  .data-\[state\=open\]\:slide-in-from-left[data-state='open'] {
    --tw-enter-translate-x: -100%;
  }
}
